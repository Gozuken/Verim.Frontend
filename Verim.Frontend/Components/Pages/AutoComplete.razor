@page "/autocomplete"
@using GoogleMapsComponents.Maps.Places
@using System.Text.Json;
@using Radzen.Blazor
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime;


<h4 class="mb-4">RadzenTextBox using Google Places Automcomplete</h4>
<RadzenTextBox style="width: 100%;" @ref="addressBoxRadzenTextBox" Name="BusinessAddress1" value="@formattedAddress" Change=@GoogleAddressAutoComplete />
<hr />
<h4 class="mb-4">RadzenTextArea display result JSON</h4>
<RadzenTextArea value="@placeData" Class="w-100" />

@code {
    private ElementReference addressBox;
    private RadzenTextBox? addressBoxRadzenTextBox;
    private Autocomplete? autocomplete;
    private string? placeData;
    private string? formattedAddress;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // convert RadzenTextBox to ElementReference
            addressBox = addressBoxRadzenTextBox.Element;

            // setup google address auto complete
            await SetupGoogleAddressAutoComplete();
        }
    }

    private async Task GoogleAddressAutoComplete()
    {

        System.Threading.Thread.Sleep(500); // this is a hack. with no wait place was null first time

        var place = await this.autocomplete.GetPlace();

        var placeDataTest = JsonSerializer.Serialize(place);

        if (place?.AddressComponents == null)
        {
            // this.message = "No results available for " + place?.Name;
        }
        else
        {
            var placeId = place.PlaceId;
            var streetNumber = place.AddressComponents.FirstOrDefault(a => a.Types != null && a.Types.Contains("street_number"))?.LongName;
            var street = place.AddressComponents.FirstOrDefault(a => a.Types != null && (a.Types.Contains("route") || a.Types.Contains("street_address")))?.LongName;
            var city = place.AddressComponents.FirstOrDefault(a => a.Types != null && (a.Types.Contains("locality") || a.Types.Contains("neighborhood")))?.LongName;
            var state = place.AddressComponents.FirstOrDefault(a => a.Types != null && a.Types.Contains("administrative_area_level_1"))?.LongName;
            var country = place.AddressComponents.FirstOrDefault(a => a.Types != null && a.Types.Contains("country"))?.LongName;
            var postcode = place.AddressComponents.FirstOrDefault(a => a.Types != null && a.Types.Contains("postal_code"))?.LongName;
            formattedAddress = place.FormattedAddress;
            placeData = JsonSerializer.Serialize(place);
        }
    }

    private async Task SetupGoogleAddressAutoComplete()
    {
        //    Logger.LogInformation("SetupGoogleAddressAutoComplete called");
        this.autocomplete = await Autocomplete.CreateAsync(JSRuntime, addressBox, new AutocompleteOptions
            {
                StrictBounds = false,
            });

        //await autocomplete.SetFields(new []{ "address_components", "geometry", "icon", "name" }); , "formatted_Address" formatted_address
        await this.autocomplete.SetFields(new[] { "address_components", "place_id", "formatted_address" });
    }
}