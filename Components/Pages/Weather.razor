@page "/weather"
@attribute [StreamRendering]
@using Blazor.WeatherWidget
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            @foreach (var forecast in forecasts)
            {
                <div class="col-md-4"> <!-- Adjust for three columns -->
                    <div class="card mb-3"> <!-- Card for each forecast -->
                        <div class="card-body">
                            <h5 class="card-title">@forecast.Date.ToShortDateString()</h5>
                            <p class="card-text">Temp. (C): @forecast.TemperatureC °C</p>
                            <p class="card-text">Summary: @forecast.Summary</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
